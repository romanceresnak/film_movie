syntax = "proto3";

import "google/protobuf/timestamp.proto";

message Rental{
    //unique identifier of rental
    int64 rental_id = 1;

    //rental date
    string rental_date = 2;

    //primary key from inventory table
    string inventory_id = 3;

    //primary key from customer entity
    string customer_id = 4;

    //return date of rent
    string return_date = 5;

    //primary key from staff entity
    string staff_id = 6;

    //Attribute about last update
    google.protobuf.Timestamp lastUpdate = 7;
}

//Request data to create new rental
message CreateRequest{
    //api version
    string api = 1;

    //Rental entity
    Rental rental = 2;
}

//Response data of created new rental
message CreateResponse{
    //api version
    string api = 1;

    //Id of created rental
    int64 country_id = 2;
}

//Request data to read rental by id
message ReadRequest{
    //api version
    string api = 1;

    //Get rental by id
    int64 country_id = 2;
}

//Response data by id
message ReadResponse{
    //api version
    string api = 1;

    //Store rental by id
    Rental rental_id = 2;
}

//Request data to update exists rental
message UpdateRequest{
    //api version
    string api = 1;

    //Rental entity
    Rental rental = 2;
}

//Response data of updated rental
message UpdateResponse{
    //api version
    string api = 1;

    // Contains number of entities have been updated
    // Equals 1 in case of successful update
    int64 updated = 2;
}

//Request to delete rental by id
message DeleteRequest{
    //api version
    string api = 1;

    //id of rentals which we want to delete
    int64 rental_id =2;
}

//Response for delete request
message DeleteResponse{
    //api version
    string api = 1;

    // Contains number of entities have been deleted
    // Equals 1 in case of successful delete
    int64 deleted = 2;
}

//Request for reading all rental entities
message ReadAllRequest{
    //api version
    string id = 1;
}

//Response for read all rentals
message ReadAllResponse{
    //api version
    string id =1;

    //all rentals
    repeated Rental rentals = 2;
}

//Service to manage all the request
service RentalService {
    //Create new rental
    rpc Create (CreateRequest) returns (CreateResponse);

    //Read rental
    rpc Read (ReadRequest) returns (ReadResponse);

    //Update rental
    rpc Update (UpdateRequest) returns (UpdateResponse);

    //Delete rental
    rpc Delete (DeleteRequest) returns (DeleteResponse);

    //Read all rental
    rpc ReadAll (ReadAllRequest) returns (ReadAllResponse);
}