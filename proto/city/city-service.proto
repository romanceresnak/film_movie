syntax = "proto3";

import "google/protobuf/timestamp.proto";

message City{
    //unique identifier of store
    int64 store_id = 1;

    //film manager staff
    string manager_staff_id = 2;

    //address id
    string address_id = 3;

    //Attribute about last update
    google.protobuf.Timestamp lastUpdate = 4;
}

//Request data to create new city
message CreateRequest{
    //api version
    string api = 1;

    //City entity
    City city = 2;
}

//Response data of created new city
message CreateResponse{
    //api version
    string api = 1;

    //Id of created City
    int64 city_id = 2;
}

//Request data to read City by id
message ReadRequest{
    //api version
    string api = 1;

    //Get city by id
    int64 city_id = 2;
}

//Response data by id
message ReadResponse{
    //api version
    string api = 1;

    //City by id
    City city = 2;
}

//Request data to update exists city
message UpdateRequest{
    //api version
    string api = 1;

    //City text entity
    City city = 2;
}

//Response data of updated city
message UpdateResponse{
    //api version
    string api = 1;

    // Contains number of entities have been updated
    // Equals 1 in case of successful update
    int64 updated = 2;
}

//Request to delete city by id
message DeleteRequest{
    //api version
    string api = 1;

    //id of city which we want to delete
    int64 city_id =2;
}

//Response for delete request
message DeleteResponse{
    //api version
    string api = 1;

    // Contains number of entities have been deleted
    // Equals 1 in case of successful delete
    int64 deleted = 2;
}

//Request for reading all city entities
message ReadAllRequest{
    //api version
    string id = 1;
}

//Response for read all cities
message ReadAllResponse{
    //api version
    string id =1;

    //all cities
    repeated City cities = 2;
}

//Service to manage all the request
service CityService {
    //Create new city
    rpc Create (CreateRequest) returns (CreateResponse);

    //Read city
    rpc Read (ReadRequest) returns (ReadResponse);

    //Update city
    rpc Update (UpdateRequest) returns (UpdateResponse);

    //Delete city
    rpc Delete (DeleteRequest) returns (DeleteResponse);

    //Read all city
    rpc ReadAll (ReadAllRequest) returns (ReadAllResponse);
}